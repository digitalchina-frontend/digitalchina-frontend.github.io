import{_ as n,r as c,o,c as d,a as e,b as a,d as i,e as t}from"./app.cd040b68.js";const r="/images/git-squash/feature-branch.png",h="/images/git-squash/status.png",p="/images/git-squash/merge-squash.png",u="/images/git-squash/rebasei.png",l="/images/git-squash/rebase-squash.png",m="/images/git-squash/rebase-message.png",g="/images/git-squash/rebase-message-complete.png",b="/images/git-squash/rebase-squash-result.png",q={},v=t('<h1 id="git-中的-squash-合并" tabindex="-1"><a class="header-anchor" href="#git-中的-squash-合并" aria-hidden="true">#</a> Git 中的 Squash 合并</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>在日常工作中，我们经常会使用 MR(对于 gitlab) 或 PR(对于 github) 发起合并请求，对于 Github 上的项目，项目管理员可以在以下三个选项中选择一个作为合并选项：</p><ul><li><code>Create a merge commit</code>：会在主分支上自动生成一个形如： <code>Merge pull request #[...] from [...]</code> 的 <code>merge commit</code> 将两个分支连接在一起，并记录合并冲突涉及到的改动。</li><li><code>Squash and merge</code>：会将功能分支上的所有提交（commit）合并为一个新的提交添加到主分支，而不是将每个提交都添加到主分支的历史记录中。</li><li><code>Rebase and merge</code>：会将功能分支和主分支上的所有提交历史线性地在最近共同祖先处往后重写，线性提交历史有助于代码回滚，但这也意味着主分支对功能分支的引用丢失了。</li></ul><p>以上三个选项都能将功能分支代码合并到主分支（main 或者 master）中，这篇文章会简单介绍应该在何时使用 Squash 合并以及如何在本地合并提交。</p><h2 id="何时使用-squash" tabindex="-1"><a class="header-anchor" href="#何时使用-squash" aria-hidden="true">#</a> 何时使用 Squash</h2><p>如上所述，Squash 会将多个提交合并为一个新的提交，其中包含来自功能分支的所有更改，这个新的提交不是自动生成的，而是手动输入提交信息后新增的。</p><h3 id="那么你在什么情况下会考虑使用-squash-呢" tabindex="-1"><a class="header-anchor" href="#那么你在什么情况下会考虑使用-squash-呢" aria-hidden="true">#</a> 那么你在什么情况下会考虑使用 Squash 呢？</h3><p>假设你在一个单独的功能分支上工作，并在这个分支产生了许多提交，随着工作复杂度的增强和时间的流逝，你可能会产生相当多的提交，当你完成工作并准备合并分支时，你可能会希望只在主分支上产生一个提交，此时，你可以使用 Squash 来达成目标。</p><h3 id="是否应该使用-squash" tabindex="-1"><a class="header-anchor" href="#是否应该使用-squash" aria-hidden="true">#</a> 是否应该使用 Squash</h3><p>使用 Squash 意味着你的多个提交信息不会在主分支上出现，同时你的提交不会包含对功能分支的引用，但好处则是主分支提交历史的井然有序。</p><p>总的来说，是否使用 Squash 是一个偏好问题，通常较大、较复杂的合并不应该使用 Squash，而较小的合并则比较适用 Squash。当然，将大型功能分支分解为多个小型功能分支可能更加明智，这对于 <code>cherry-pick</code> 提交到别的分支和仓库非常有用。</p><div class="custom-container tip"><p class="custom-container-title">建议</p><p>由于 Squash 生成的提交是全新的，不存在于功能分支的历史记录中，因此，建议在合并完成后删除功能分支以防止出现混淆（比如 Squash Merge 后再次对同一分支进行普通 Merge）。</p></div><h2 id="怎么在本地合并提交" tabindex="-1"><a class="header-anchor" href="#怎么在本地合并提交" aria-hidden="true">#</a> 怎么在本地合并提交</h2><p>在本地合并提交有两种比较通用的方式，分别为 Merge 命令和 Rebase 命令，下面一一介绍：</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>没有单独的 <code>git squash</code> 命令，相反，<code>squash</code> 是执行 <code>git merge</code> 命令时的一个选项。</p></div><h3 id="方式一-git-merge-squash" tabindex="-1"><a class="header-anchor" href="#方式一-git-merge-squash" aria-hidden="true">#</a> 方式一：<code>git merge --squash</code></h3><p>假设现在你的功能分支 <code>feature/squash-demo</code> 上有两个提交 <code>commit 1</code> 和 <code>commit 2</code>：</p><p><img src="'+r+`" alt="feature-branch"></p><p>想要合并两个提交，需要基于不包含这两个提交的分支（通常是主分支）创建一个新的分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout main
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> pr/squash-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，带上 <code>--squash</code> 选项将功能分支合并到这个新分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token parameter variable">--squash</span> feature/squash-demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，检查工作区和暂存区：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你会发现这两个提交对应的改动出现在了暂存区： <img src="`+h+`" alt="status.png"></p><p>也就是说，<code>--squash</code> 选项没有自动生成一个合并的提交，而是在你的暂存区中留下了文件改动，然后你可以自己提交。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-am</span> <span class="token string">&quot;Combine 2 into 1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，我们就在新的分支 <code>pr/squash-demo</code> 上完成了提交的合并。</p><p><img src="`+p+'" alt="merge-squash"></p><h3 id="方式二-git-rebase-i" tabindex="-1"><a class="header-anchor" href="#方式二-git-rebase-i" aria-hidden="true">#</a> 方式二：<code>git rebase -i</code></h3><p>现在我们回到具有两个提交 <code>commit 1</code> 和 <code>commit 2</code> 的功能分支 <code>feature/squash-demo</code> 上：</p><p><img src="'+r+`" alt="feature-branch"></p><p>通过交互式 Rebase 命令（<code>git rebase</code> 命令的 <code>-i</code> 选项）来合并两个提交：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>HEAD~{n}</code> 表示当前 <code>HEAD</code> 指向的提交的前 n 个提交（n &gt;= 0），如果不加这个参数会显示当前分支所有提交。</p></div>`,36),_={href:"https://www.runoob.com/linux/linux-vim.html",target:"_blank",rel:"noopener noreferrer"},f=t('<p><img src="'+u+'" alt="rebasei"></p><p>从上图可以看到，在这个编辑器中，你可以编辑 Git 提交历史，比如：你可以删除一个提交，或者你可以重新对提交进行排序；这里我们使用 squash 命令对提交进行合并，注释中对 squash 命令的描述是：“使用提交，但融合到之前的提交中”。</p><p>所以，要合并这两个提交，只需要保留第一个提交为 pick 命令，将后续提交改为 squash 命令：</p><p><img src="'+l+'" alt="rebase-squash"></p><p>保存文本后会再打开一个文本编辑器用于输入合并后的提交信息：</p><p><img src="'+m+'" alt="rebase-message"></p><p>直接在顶部键入提交信息即可，也可以保留或删除之前两个提交的信息：</p><p><img src="'+g+'" alt="rebase-message-complete"></p><p>保存文本，我们就把两个提交合并为了一个新的提交。</p><p><img src="'+b+'" alt="rebase-squash-result"></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',11),k={href:"https://matt-rickard.com/squash-merge-or-rebase",target:"_blank",rel:"noopener noreferrer"},x={href:"https://learn.microsoft.com/en-us/azure/devops/repos/git/merging-with-squash?view=azure-devops",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.git-tower.com/learn/git/faq/git-squash",target:"_blank",rel:"noopener noreferrer"};function w(M,E){const s=c("ExternalLinkIcon");return o(),d("div",null,[v,e("p",null,[a("执行后会打开一个文本编辑器界面，显示了这两次提交的记录和一堆注释，文本编辑器的操作方式类似 "),e("a",_,[a("vi/vim"),i(s)]),a("。")]),f,e("ul",null,[e("li",null,[e("a",k,[a("Squash, Merge, or Rebase?"),i(s)])]),e("li",null,[e("a",x,[a("Merge strategies and squash merge"),i(s)])]),e("li",null,[e("a",S,[a("How to Squash Commits in Git"),i(s)])])])])}const C=n(q,[["render",w],["__file","index.html.vue"]]);export{C as default};
